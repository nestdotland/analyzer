var searchIndex = JSON.parse('{\
"nest_analyzer":{"doc":"","i":[[0,"analyzer","nest_analyzer","",null,null],[3,"Context","nest_analyzer::analyzer","An analyzer context",null,null],[12,"file_name","","",0,null],[12,"diagnostics","","",0,null],[12,"source_map","","",0,null],[12,"root_scope","","",0,null],[3,"AnalyzeOptions","","An analyzer options struct",null,null],[12,"data","","",1,null],[3,"Analyzer","","An analyzer",null,null],[12,"ast_parser","","",2,null],[12,"syntax","","",2,null],[12,"rules","","",2,null],[11,"create_diagnostic","","",0,[[["span",3]],["diagnostic",3]]],[11,"add_diagnostic","","",0,[[["span",3]]]],[11,"new","","Creates a new analyzer with an AstParser",2,[[["syntax",4],["box",3],["vec",3]]]],[11,"analyze","","Main method to analyze source code with Rules.",2,[[["string",3],["option",4],["analyzeoptions",3]],[["vec",3],["swcdiagnosticbuffer",3],["result",4]]]],[11,"filter_diagnostics","","",2,[[["arc",3],["context",3]],[["diagnostic",3],["vec",3]]]],[11,"check_module","","",2,[[["string",3],["option",4],["module",3],["analyzeoptions",3]],[["diagnostic",3],["vec",3]]]],[0,"checks","nest_analyzer","",null,null],[5,"get_all_rules","nest_analyzer::checks","Get all rules",null,[[],[["box",3],["vec",3]]]],[5,"get_static_rules","","",null,[[],[["box",3],["vec",3]]]],[0,"ban_deno_plugin","","",null,null],[3,"BanDenoPlugin","nest_analyzer::checks::ban_deno_plugin","Rule `ban-deno-plugin` (BanDenoPlugin)",null,null],[0,"ban_deno_run","nest_analyzer::checks","",null,null],[3,"BanDenoRun","nest_analyzer::checks::ban_deno_run","Rule `ban-deno-run` (BanDenoRun)",null,null],[0,"check_deno_run","nest_analyzer::checks","",null,null],[3,"CheckDenoRun","nest_analyzer::checks::check_deno_run","Rule `ban-deno-run` (CheckDenoRun)",null,null],[8,"Rule","nest_analyzer::checks","An analyzer rule trait is represented here",null,null],[10,"new","","Creates a new reference of self",3,[[],["box",3]]],[10,"check_module","","Module analysis method for the rule",3,[[["option",4],["analyzeoptions",3],["context",3],["arc",3],["module",3]]]],[10,"code","","Code for a particular rule for example `no-foo-bar`",3,[[]]],[0,"diagnostic","nest_analyzer","",null,null],[3,"Location","nest_analyzer::diagnostic","",null,null],[12,"filename","","",4,null],[12,"line","","",4,null],[12,"col","","",4,null],[3,"Diagnostic","","A Diagnostic that will be returned after analysis",null,null],[12,"location","","",5,null],[12,"message","","",5,null],[12,"code","","",5,null],[12,"line_src","","",5,null],[12,"snippet_length","","",5,null],[0,"tree","nest_analyzer","",null,null],[5,"analyze_dependencies","nest_analyzer::tree","",null,[[],[["vec",3],["swcdiagnosticbuffer",3],["result",4]]]],[0,"swc_util","nest_analyzer","",null,null],[3,"SwcDiagnosticBuffer","nest_analyzer::swc_util","",null,null],[12,"diagnostics","","",6,null],[3,"SwcErrorBuffer","","",null,null],[3,"AstParser","","Low-level utility structure with common AST parsingâ€¦",null,null],[12,"buffered_error","","",7,null],[12,"source_map","","",7,null],[12,"handler","","",7,null],[12,"globals","","",7,null],[12,"comments","","",7,null],[5,"get_default_es_config","","",null,[[],["syntax",4]]],[5,"get_default_ts_config","","",null,[[],["syntax",4]]],[11,"from_swc_error","","",6,[[["astparser",3],["swcerrorbuffer",3]]]],[11,"default","","",8,[[]]],[11,"new","","",7,[[]]],[11,"parse_module","","",7,[[["syntax",4]],[["result",4],["module",3],["swcdiagnosticbuffer",3]]]],[11,"get_span_location","","",7,[[["span",3]],["loc",3]]],[14,"unwrap_or_return","nest_analyzer","",null,null],[11,"from","nest_analyzer::analyzer","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","nest_analyzer::checks::ban_deno_plugin","",9,[[]]],[11,"into","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","nest_analyzer::checks::ban_deno_run","",10,[[]]],[11,"into","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"from","nest_analyzer::checks::check_deno_run","",11,[[]]],[11,"into","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"from","nest_analyzer::diagnostic","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","nest_analyzer::swc_util","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"new","nest_analyzer::checks::ban_deno_plugin","Creates self reference",9,[[],["box",3]]],[11,"code","","Declare rule code",9,[[]]],[11,"check_module","","Main entrypoint for module analysis",9,[[["option",4],["analyzeoptions",3],["context",3],["arc",3],["module",3]]]],[11,"new","nest_analyzer::checks::ban_deno_run","Creates self reference",10,[[],["box",3]]],[11,"code","","Declare rule code",10,[[]]],[11,"check_module","","Main entrypoint for module analysis",10,[[["option",4],["analyzeoptions",3],["context",3],["arc",3],["module",3]]]],[11,"new","nest_analyzer::checks::check_deno_run","Creates self reference",11,[[],["box",3]]],[11,"code","","Declare rule code",11,[[]]],[11,"check_module","","Main entrypoint for module analysis",11,[[["option",4],["analyzeoptions",3],["context",3],["arc",3],["module",3]]]],[11,"clone","nest_analyzer::analyzer","",0,[[],["context",3]]],[11,"clone","","",1,[[],["analyzeoptions",3]]],[11,"clone","nest_analyzer::diagnostic","",4,[[],["location",3]]],[11,"clone","","",5,[[],["diagnostic",3]]],[11,"clone","nest_analyzer::swc_util","",6,[[],["swcdiagnosticbuffer",3]]],[11,"clone","","",8,[[],["swcerrorbuffer",3]]],[11,"default","","",7,[[]]],[11,"eq","nest_analyzer::diagnostic","",4,[[["location",3]]]],[11,"ne","","",4,[[["location",3]]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","nest_analyzer::swc_util","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"emit","","",8,[[["diagnosticbuilder",3]]]],[11,"deserialize","nest_analyzer::diagnostic","",4,[[],["result",4]]],[11,"deserialize","","",5,[[],["result",4]]],[11,"serialize","","",4,[[],["result",4]]],[11,"serialize","","",5,[[],["result",4]]]],"p":[[3,"Context"],[3,"AnalyzeOptions"],[3,"Analyzer"],[8,"Rule"],[3,"Location"],[3,"Diagnostic"],[3,"SwcDiagnosticBuffer"],[3,"AstParser"],[3,"SwcErrorBuffer"],[3,"BanDenoPlugin"],[3,"BanDenoRun"],[3,"CheckDenoRun"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);